/**
 * MyLassi.XYZ
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateExerciseOptions from '../model/CreateExerciseOptions';
import EditExerciseOptions from '../model/EditExerciseOptions';
import Error from '../model/Error';
import Exercise from '../model/Exercise';
import ExerciseList from '../model/ExerciseList';

/**
* Exercises service.
* @module api/ExercisesApi
* @version Develop
*/
export default class ExercisesApi {

    /**
    * Constructs a new ExercisesApi. 
    * @alias module:api/ExercisesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2ExercisesDocIdDelete operation.
     * @callback module:api/ExercisesApi~apiV2ExercisesDocIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} docId 
     * @param {module:api/ExercisesApi~apiV2ExercisesDocIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV2ExercisesDocIdDelete(docId, callback) {
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling apiV2ExercisesDocIdDelete");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/exercises/{doc_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ExercisesDocIdGet operation.
     * @callback module:api/ExercisesApi~apiV2ExercisesDocIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} docId 
     * @param {module:api/ExercisesApi~apiV2ExercisesDocIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    apiV2ExercisesDocIdGet(docId, callback) {
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling apiV2ExercisesDocIdGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Exercise;
      return this.apiClient.callApi(
        '/api/v2/exercises/{doc_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ExercisesDocIdPatch operation.
     * @callback module:api/ExercisesApi~apiV2ExercisesDocIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} docId 
     * @param {module:model/EditExerciseOptions} editExerciseOptions 
     * @param {module:api/ExercisesApi~apiV2ExercisesDocIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    apiV2ExercisesDocIdPatch(docId, editExerciseOptions, callback) {
      let postBody = editExerciseOptions;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling apiV2ExercisesDocIdPatch");
      }
      // verify the required parameter 'editExerciseOptions' is set
      if (editExerciseOptions === undefined || editExerciseOptions === null) {
        throw new Error("Missing the required parameter 'editExerciseOptions' when calling apiV2ExercisesDocIdPatch");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Exercise;
      return this.apiClient.callApi(
        '/api/v2/exercises/{doc_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ExercisesGet operation.
     * @callback module:api/ExercisesApi~apiV2ExercisesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExerciseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.page 
     * @param {module:api/ExercisesApi~apiV2ExercisesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExerciseList}
     */
    apiV2ExercisesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExerciseList;
      return this.apiClient.callApi(
        '/api/v2/exercises', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2ExercisesPost operation.
     * @callback module:api/ExercisesApi~apiV2ExercisesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateExerciseOptions} createExerciseOptions 
     * @param {module:api/ExercisesApi~apiV2ExercisesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    apiV2ExercisesPost(createExerciseOptions, callback) {
      let postBody = createExerciseOptions;
      // verify the required parameter 'createExerciseOptions' is set
      if (createExerciseOptions === undefined || createExerciseOptions === null) {
        throw new Error("Missing the required parameter 'createExerciseOptions' when calling apiV2ExercisesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Exercise;
      return this.apiClient.callApi(
        '/api/v2/exercises', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
