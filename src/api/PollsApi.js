/**
 * MyLassi.XYZ
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Develop
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePollOptions from '../model/CreatePollOptions';
import Error from '../model/Error';
import PatchPollOptions from '../model/PatchPollOptions';
import Poll from '../model/Poll';
import PollList from '../model/PollList';
import PollSession from '../model/PollSession';

/**
* Polls service.
* @module api/PollsApi
* @version Develop
*/
export default class PollsApi {

    /**
    * Constructs a new PollsApi. 
    * @alias module:api/PollsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV2PollsDocIdGet operation.
     * @callback module:api/PollsApi~apiV2PollsDocIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Poll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} docId 
     * @param {module:api/PollsApi~apiV2PollsDocIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Poll}
     */
    apiV2PollsDocIdGet(docId, callback) {
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling apiV2PollsDocIdGet");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Poll;
      return this.apiClient.callApi(
        '/api/v2/polls/{doc_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PollsDocIdPatch operation.
     * @callback module:api/PollsApi~apiV2PollsDocIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Poll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} docId 
     * @param {module:model/PatchPollOptions} patchPollOptions 
     * @param {module:api/PollsApi~apiV2PollsDocIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Poll}
     */
    apiV2PollsDocIdPatch(docId, patchPollOptions, callback) {
      let postBody = patchPollOptions;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling apiV2PollsDocIdPatch");
      }
      // verify the required parameter 'patchPollOptions' is set
      if (patchPollOptions === undefined || patchPollOptions === null) {
        throw new Error("Missing the required parameter 'patchPollOptions' when calling apiV2PollsDocIdPatch");
      }

      let pathParams = {
        'doc_id': docId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Poll;
      return this.apiClient.callApi(
        '/api/v2/polls/{doc_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PollsDocIdSessionNameGet operation.
     * @callback module:api/PollsApi~apiV2PollsDocIdSessionNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} docId 
     * @param {String} sessionName 
     * @param {module:api/PollsApi~apiV2PollsDocIdSessionNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PollSession}
     */
    apiV2PollsDocIdSessionNameGet(docId, sessionName, callback) {
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling apiV2PollsDocIdSessionNameGet");
      }
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling apiV2PollsDocIdSessionNameGet");
      }

      let pathParams = {
        'doc_id': docId,
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PollSession;
      return this.apiClient.callApi(
        '/api/v2/polls/{doc_id}/{session_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PollsDocIdSessionNameStartPost operation.
     * @callback module:api/PollsApi~apiV2PollsDocIdSessionNameStartPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} docId 
     * @param {String} sessionName 
     * @param {module:api/PollsApi~apiV2PollsDocIdSessionNameStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PollSession}
     */
    apiV2PollsDocIdSessionNameStartPost(docId, sessionName, callback) {
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling apiV2PollsDocIdSessionNameStartPost");
      }
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling apiV2PollsDocIdSessionNameStartPost");
      }

      let pathParams = {
        'doc_id': docId,
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PollSession;
      return this.apiClient.callApi(
        '/api/v2/polls/{doc_id}/{session_name}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PollsDocIdSessionNameStopPost operation.
     * @callback module:api/PollsApi~apiV2PollsDocIdSessionNameStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} docId 
     * @param {String} sessionName 
     * @param {module:api/PollsApi~apiV2PollsDocIdSessionNameStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PollSession}
     */
    apiV2PollsDocIdSessionNameStopPost(docId, sessionName, callback) {
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling apiV2PollsDocIdSessionNameStopPost");
      }
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling apiV2PollsDocIdSessionNameStopPost");
      }

      let pathParams = {
        'doc_id': docId,
        'session_name': sessionName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PollSession;
      return this.apiClient.callApi(
        '/api/v2/polls/{doc_id}/{session_name}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PollsDocIdSessionNameVoteLabelNamePost operation.
     * @callback module:api/PollsApi~apiV2PollsDocIdSessionNameVoteLabelNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} docId 
     * @param {String} sessionName 
     * @param {String} labelName 
     * @param {module:api/PollsApi~apiV2PollsDocIdSessionNameVoteLabelNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PollSession}
     */
    apiV2PollsDocIdSessionNameVoteLabelNamePost(docId, sessionName, labelName, callback) {
      let postBody = null;
      // verify the required parameter 'docId' is set
      if (docId === undefined || docId === null) {
        throw new Error("Missing the required parameter 'docId' when calling apiV2PollsDocIdSessionNameVoteLabelNamePost");
      }
      // verify the required parameter 'sessionName' is set
      if (sessionName === undefined || sessionName === null) {
        throw new Error("Missing the required parameter 'sessionName' when calling apiV2PollsDocIdSessionNameVoteLabelNamePost");
      }
      // verify the required parameter 'labelName' is set
      if (labelName === undefined || labelName === null) {
        throw new Error("Missing the required parameter 'labelName' when calling apiV2PollsDocIdSessionNameVoteLabelNamePost");
      }

      let pathParams = {
        'doc_id': docId,
        'session_name': sessionName,
        'label_name': labelName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PollSession;
      return this.apiClient.callApi(
        '/api/v2/polls/{doc_id}/{session_name}/vote/{label_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PollsGet operation.
     * @callback module:api/PollsApi~apiV2PollsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PollList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 
     * @param {Number} opts.page 
     * @param {module:api/PollsApi~apiV2PollsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PollList}
     */
    apiV2PollsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PollList;
      return this.apiClient.callApi(
        '/api/v2/polls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV2PollsPost operation.
     * @callback module:api/PollsApi~apiV2PollsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Poll} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreatePollOptions} createPollOptions 
     * @param {module:api/PollsApi~apiV2PollsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Poll}
     */
    apiV2PollsPost(createPollOptions, callback) {
      let postBody = createPollOptions;
      // verify the required parameter 'createPollOptions' is set
      if (createPollOptions === undefined || createPollOptions === null) {
        throw new Error("Missing the required parameter 'createPollOptions' when calling apiV2PollsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Poll;
      return this.apiClient.callApi(
        '/api/v2/polls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
